{"version":3,"sources":["serviceWorker.ts","AddItemForm.tsx","EditableSpan.tsx","task.tsx","Todolist.tsx","state/todolists-reducer.ts","state/task-reducer.ts","AppWithRedux.tsx","store.ts","index.tsx"],"names":["Boolean","window","location","hostname","match","AddItemForm","React","memo","props","useState","title","setTitle","error","setError","addItem","trim","TextField","variant","value","onChange","e","currentTarget","onKeyPress","charCode","label","helperText","IconButton","color","onClick","AddBox","EditableSpan","editMode","setEditMode","autoFocus","onBlur","onDoubleClick","Task","console","log","onTitleChangeHandler","useCallback","newValue","changeTaskTitle","task","id","todolistID","className","isDone","Checkbox","checked","newIsDoneValue","changeTaskStatus","removeTask","Delete","Todolist","addTask","changeTodolistTitle","onAllClickHandler","changeFilter","onActiveClickHandler","onCompletedClickHandler","tasksForTodolist","tasks","filter","t","removeTodolist","map","key","Button","initialState","AppWithRedux","todolists","useSelector","state","dispatch","useDispatch","todolistId","taskId","type","removeTaskAC","addTaskAC","changeStatus","changeTaskStatusAC","newTitle","changeTaskTitleAC","ChangeTodolistFilterAC","ChangeTodolistTitleAC","addTodolist","v1","AddTodolistAC","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","Container","fixed","Grid","container","style","padding","spacing","tl","item","Paper","rootReducer","combineReducers","action","copyState","todolist","find","store","createStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.4440cd42.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {IconButton, TextField} from '@material-ui/core';\r\nimport {AddBox} from '@material-ui/icons';\r\n\r\nexport type AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n}\r\n\r\nexport const AddItemForm = React.memo((props: AddItemFormPropsType) => {\r\n\r\n    let [title, setTitle] = useState(\"\")\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const addItem = () => {\r\n        if (title.trim() !== \"\") {\r\n            props.addItem(title);\r\n            setTitle(\"\");\r\n        } else {\r\n            setError(\"Title is required\");\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if(error !== null) setError(null)\r\n        if (e.charCode === 13) {\r\n            addItem();\r\n        }\r\n    }\r\n\r\n    return <div>\r\n        <TextField variant=\"outlined\"\r\n                   error={!!error}\r\n                   value={title}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   label=\"Title\"\r\n                   helperText={error}\r\n        />\r\n        <IconButton color=\"secondary\" onClick={addItem}>\r\n            <AddBox />\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, {ChangeEvent, useState} from 'react';\r\nimport {TextField} from '@material-ui/core';\r\n\r\nexport type EditableSpanPropsType = {\r\n    value: string\r\n    onChange: (newValue: string) => void\r\n}\r\n\r\nexport const EditableSpan = React.memo(function(props: EditableSpanPropsType) {\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [title, setTitle] = useState(props.value);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n        setTitle(props.value);\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false);\r\n        props.onChange(title);\r\n    }\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return editMode\r\n        ?    <TextField variant=\"outlined\"\r\n                        value={title} onChange={changeTitle} autoFocus onBlur={activateViewMode} />\r\n        : <span onDoubleClick={activateEditMode}>{props.value}</span>\r\n})\r\n","import React, {ChangeEvent, useCallback} from \"react\";\r\nimport {Checkbox, IconButton} from \"@material-ui/core\";\r\nimport {EditableSpan} from \"./EditableSpan\";\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport {TaskType} from \"./Todolist\";\r\n\r\n\r\nexport type TaskPropsType = {\r\n    todolistID: string\r\n    task: TaskType\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, isDone: boolean, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n}\r\n\r\nexport const Task = React.memo(function (props: TaskPropsType) {\r\n    console.log(\"task\")\r\n    // const taskFromRedux = useSelector<AppRootStateType, TaskType>(state =>\r\n    //     state.tasks[props.todolistID].filter(task=> task.id === props.task.id)[0])\r\n    // const dispatch = useDispatch()\r\n    //const onClickHandler = () => dispatch(removeTaskAC(taskFromRedux.id, props.todolistID))\r\n    \r\n    const onClickHandler = () => props.removeTask(props.task.id, props.todolistID)\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked;\r\n        props.changeTaskStatus(props.task.id, newIsDoneValue, props.todolistID);\r\n    }\r\n    const onTitleChangeHandler = useCallback((newValue: string) => {\r\n        props.changeTaskTitle(props.task.id, newValue, props.todolistID);\r\n    }, [])\r\n\r\n    return(\r\n        <div className={props.task.isDone ? \"is-done\" : \"\"}>\r\n            <Checkbox\r\n                checked={props.task.isDone}\r\n                color=\"primary\"\r\n                onChange={onChangeHandler}\r\n            />\r\n\r\n            <EditableSpan value={props.task.title} onChange={onTitleChangeHandler} />\r\n            <IconButton onClick={onClickHandler}>\r\n                <Delete />\r\n            </IconButton>\r\n        </div>\r\n    )\r\n})","import React, {ChangeEvent, useCallback} from 'react';\r\nimport {FilterValuesType} from './App';\r\nimport {AddItemForm} from './AddItemForm';\r\nimport {EditableSpan} from './EditableSpan';\r\nimport {Button, Checkbox, IconButton} from '@material-ui/core';\r\nimport {Delete} from '@material-ui/icons';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"./store\";\r\nimport {TasksStateType, TodolistType} from \"./AppWithRedux\";\r\nimport {Task} from \"./task\";\r\n\r\nexport type TaskType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\n\r\ntype PropsType = {\r\n    id: string\r\n    title: string\r\n    tasks: Array<TaskType>\r\n\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    removeTodolist: (id: string) => void\r\n    changeTodolistTitle: (id: string, newTitle: string) => void\r\n    filter: FilterValuesType\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, isDone: boolean, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n}\r\n\r\nexport const Todolist = React.memo((props: PropsType) => {\r\n\r\n    const addTask = useCallback((title: string) => {\r\n\r\n        props.addTask(title, props.id);\r\n    },\r\n        [props.addTask, props.id])\r\n\r\n    const removeTodolist = () => {\r\n        props.removeTodolist(props.id);\r\n    }\r\n    const changeTodolistTitle = useCallback((title: string) => {\r\n        props.changeTodolistTitle(props.id, title);\r\n    }, [])\r\n\r\n    const onAllClickHandler =useCallback( () => props.changeFilter(\"all\", props.id), [props.id]);\r\n    const onActiveClickHandler =useCallback( () => props.changeFilter(\"active\", props.id), [props.id]);\r\n    const onCompletedClickHandler =useCallback( () => props.changeFilter(\"completed\", props.id), [props.id]);\r\n\r\n    let tasksForTodolist = props.tasks\r\n    if (props.filter === \"active\") {\r\n        tasksForTodolist = props.tasks.filter(t => t.isDone === false);\r\n    }\r\n    if (props.filter === \"completed\") {\r\n        tasksForTodolist = props.tasks.filter(t => t.isDone === true);\r\n    }\r\n\r\n    return <div>\r\n        <h3> <EditableSpan value={props.title} onChange={changeTodolistTitle} />\r\n            <IconButton onClick={removeTodolist}>\r\n                <Delete />\r\n            </IconButton>\r\n        </h3>\r\n        <AddItemForm addItem={addTask}/>\r\n        <div>\r\n            {\r\n                tasksForTodolist.map(t => {\r\n\r\n                    return <Task\r\n                        key={t.id}\r\n                        task = {t}\r\n                        todolistID={props.id}\r\n                        changeTaskTitle={props.changeTaskTitle}\r\n                        changeTaskStatus={props.changeTaskStatus}\r\n                        removeTask={props.removeTask}\r\n                    />\r\n\r\n                })\r\n            }\r\n        </div>\r\n        <div>\r\n            <Button variant={props.filter === 'all' ? 'outlined' : 'text'}\r\n                    onClick={onAllClickHandler}\r\n                    color={'default'}\r\n            >All\r\n            </Button>\r\n            <Button variant={props.filter === 'active' ? 'outlined' : 'text'}\r\n                    onClick={onActiveClickHandler}\r\n                    color={'primary'}>Active\r\n            </Button>\r\n            <Button variant={props.filter === 'completed' ? 'outlined' : 'text'}\r\n                    onClick={onCompletedClickHandler}\r\n                    color={'secondary'}>Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n})\r\n\r\n\r\n","import {FilterValuesType, TodolistType} from '../App';\r\nimport {v1} from 'uuid';\r\n\r\nexport type RemoveTodolistActionType = {\r\n    type: 'REMOVE-TODOLIST',\r\n    id: string\r\n}\r\nexport type AddTodolistActionType = {\r\n    type: 'ADD-TODOLIST',\r\n    title: string,\r\n    todolistId:string\r\n}\r\nexport type ChangeTodolistTitleActionType = {\r\n    type: 'CHANGE-TODOLIST-TITLE',\r\n    id: string\r\n    title: string\r\n}\r\nexport type ChangeTodolistFilterActionType = {\r\n    type: 'CHANGE-TODOLIST-FILTER',\r\n    id: string\r\n    filter: FilterValuesType\r\n}\r\n\r\nlet initialState: Array<TodolistType> = []\r\n\r\ntype ActionsType = RemoveTodolistActionType | AddTodolistActionType | ChangeTodolistTitleActionType | ChangeTodolistFilterActionType;\r\n\r\nexport const todolistsReducer = (state = initialState, action: ActionsType): Array<TodolistType> => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TODOLIST':\r\n            return state.filter(tl => tl.id != action.id)\r\n\r\n        case 'ADD-TODOLIST':\r\n            return [...state, {id: action.todolistId, title: action.title, filter: \"all\"}]\r\n\r\n        case 'CHANGE-TODOLIST-TITLE': {\r\n            const todolist = state.find(tl => tl.id === action.id);\r\n            if (todolist) {\r\n                todolist.title = action.title;\r\n            }\r\n            return [...state]\r\n        }\r\n        case 'CHANGE-TODOLIST-FILTER': {\r\n            const todolist = state.find(tl => tl.id === action.id);\r\n            if (todolist) {\r\n                todolist.filter = action.filter;\r\n            }\r\n            return [...state];\r\n        }\r\n        default:\r\n            return[...state]\r\n    }\r\n}\r\n\r\nexport const RemoveTodolistAC = (todolistId: string): RemoveTodolistActionType => {\r\n    return { type: 'REMOVE-TODOLIST', id: todolistId}\r\n}\r\nexport const AddTodolistAC = (title: string): AddTodolistActionType => {\r\n    return { type: 'ADD-TODOLIST', title: title, todolistId:v1()}\r\n}\r\nexport const ChangeTodolistTitleAC = (todolistId: string, title: string): ChangeTodolistTitleActionType => {\r\n    return { type: 'CHANGE-TODOLIST-TITLE', title: title, id: todolistId}\r\n}\r\nexport const ChangeTodolistFilterAC = (todolistId: string, filter: FilterValuesType): ChangeTodolistFilterActionType => {\r\n    return { type: 'CHANGE-TODOLIST-FILTER', filter: filter, id: todolistId}\r\n}\r\n","import {TasksStateType} from '../App';\r\nimport {v1} from 'uuid';\r\n\r\nimport {AddTodolistActionType, RemoveTodolistActionType} from \"./todolists-reducer\";\r\n\r\nexport type RemoveTaskActionType = {\r\n    type: 'REMOVE-TASK',\r\n    taskId: string,\r\n    todolistId: string\r\n\r\n}\r\nexport type addTaskACType = {\r\n    type: 'ADD-TASK',\r\n    title: string,\r\n    todolistId: string\r\n}\r\nexport type changeTaskStatusActionType = {\r\n    type: 'CHANGE-TASK-STATUS',\r\n    taskId: string,\r\n    isDone: boolean,\r\n    todolistId: string\r\n}\r\nexport type changeTaskTitleActionType = {\r\n    type: 'CHANGE-TASK-TITLE',\r\n    taskId: string,\r\n    title: string\r\n    todolistId: string\r\n}\r\n\r\nlet initialState:TasksStateType = {}\r\n\r\ntype ActionsType = RemoveTaskActionType\r\n    | addTaskACType\r\n    | changeTaskStatusActionType\r\n    | changeTaskTitleActionType\r\n    | AddTodolistActionType\r\n    | RemoveTodolistActionType\r\n\r\nexport const tasksReducer = (state = initialState, action: ActionsType): TasksStateType => {\r\n    switch (action.type) {\r\n\r\n        case 'REMOVE-TASK': {\r\n            let copyState = {...state}\r\n            copyState[action.todolistId] = copyState[action.todolistId].filter(task => task.id !== action.taskId)\r\n            return copyState\r\n        }\r\n\r\n        case 'ADD-TASK': {\r\n            let task = {id: v1(), title: action.title, isDone: false}\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: [task, ...state[action.todolistId]]\r\n            }\r\n        }\r\n\r\n        case 'CHANGE-TASK-STATUS': {\r\n            return {\r\n                ...state,\r\n                [action.todolistId]:\r\n                    state[action.todolistId]\r\n                        .map(task => {\r\n                            if (task.id !== action.taskId) {\r\n                                return task\r\n                            } else {\r\n                                return {...task, isDone: action.isDone}\r\n                            }\r\n                        })\r\n            }\r\n        }\r\n\r\n        case \"CHANGE-TASK-TITLE\": {\r\n            return {\r\n                ...\r\n                    state,\r\n                [action.todolistId]:\r\n                    state[action.todolistId]\r\n                        .map(task => {\r\n                            if (task.id !== action.taskId) {\r\n                                return task\r\n                            } else {\r\n                                return {...task, title: action.title}\r\n                            }\r\n                        })\r\n            }\r\n        }\r\n\r\n        case 'ADD-TODOLIST': {\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: []\r\n            }\r\n        }\r\n\r\n        case 'REMOVE-TODOLIST': {\r\n            let copyState = {...state}\r\n            delete copyState[action.id]\r\n            return copyState\r\n        }\r\n\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const removeTaskAC = (taskId: string, todolistId: string): RemoveTaskActionType => {\r\n    return {type: 'REMOVE-TASK', taskId, todolistId}\r\n}\r\nexport const addTaskAC = (title: string, todolistId: string): addTaskACType => {\r\n    return {type: 'ADD-TASK', title, todolistId}\r\n}\r\nexport const changeTaskStatusAC = (taskId: string, isDone: boolean, todolistId: string): changeTaskStatusActionType => {\r\n    return {\r\n        type: 'CHANGE-TASK-STATUS',\r\n        taskId, isDone, todolistId\r\n    }\r\n}\r\nexport const changeTaskTitleAC = (taskId: string, title: string, todolistId: string): changeTaskTitleActionType => {\r\n    return {\r\n        type: 'CHANGE-TASK-TITLE',\r\n        taskId, title, todolistId\r\n    }\r\n}\r\n","import React, {useCallback} from 'react';\r\nimport './App.css';\r\nimport {TaskType, Todolist} from './Todolist';\r\n\r\nimport {AddItemForm} from './AddItemForm';\r\nimport {AppBar, Button, Container, Grid, IconButton, Paper, Toolbar, Typography} from '@material-ui/core';\r\nimport {Menu} from '@material-ui/icons';\r\nimport {\r\n    AddTodolistAC,\r\n    ChangeTodolistFilterAC,\r\n    ChangeTodolistTitleAC,\r\n    RemoveTodolistAC,\r\n\r\n} from \"./state/todolists-reducer\";\r\nimport {addTaskAC, changeTaskStatusAC, changeTaskTitleAC, removeTaskAC, tasksReducer} from \"./state/task-reducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"./store\";\r\n\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\";\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterValuesType\r\n}\r\n\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\n\r\nfunction AppWithRedux() {\r\n\r\n    const todolists = useSelector<AppRootStateType, Array<TodolistType>>(state => state.todolists)\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n\r\n    const removeTask = useCallback((id: string, todolistId: string) => {\r\n        dispatch(removeTaskAC(id, todolistId))\r\n    }, [dispatch])\r\n\r\n    const addTask = useCallback((title: string, todolistId: string) => {\r\n        dispatch(addTaskAC(title, todolistId))\r\n    }, [dispatch])\r\n\r\n    const changeStatus = useCallback((id: string, isDone: boolean, todolistId: string) => {\r\n        dispatch(changeTaskStatusAC(id, isDone, todolistId))\r\n    }, [dispatch])\r\n\r\n    const changeTaskTitle = useCallback((id: string, newTitle: string, todolistId: string) => {\r\n        dispatch(changeTaskTitleAC(id, newTitle, todolistId))\r\n    }, [dispatch])\r\n\r\n    const changeFilter = useCallback((value: FilterValuesType, todolistId: string) => {\r\n        dispatch(ChangeTodolistFilterAC(todolistId ,value))\r\n    }, [dispatch])\r\n\r\n    const removeTodolist = useCallback((id: string) => {\r\n        dispatch(RemoveTodolistAC(id))\r\n    }, [dispatch])\r\n\r\n    const changeTodolistTitle = useCallback((id: string, title: string) => {\r\n        dispatch(ChangeTodolistTitleAC(id, title))\r\n\r\n    }, [dispatch])\r\n\r\n    const addTodolist = useCallback((title: string) =>  {\r\n        dispatch(AddTodolistAC(title))\r\n    }, [dispatch])\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        News\r\n                    </Typography>\r\n                    <Button color=\"inherit\">Login</Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Grid container style={{padding: \"20px\"}}>\r\n                    <AddItemForm addItem={addTodolist}/>\r\n                </Grid>\r\n                <Grid container spacing={3}>\r\n                    {\r\n                        todolists.map(tl => {\r\n                            let allTodolistTasks = tasks[tl.id];\r\n                            let tasksForTodolist = allTodolistTasks;\r\n\r\n                            return <Grid item>\r\n                                <Paper style={{padding: \"10px\"}}>\r\n                                    <Todolist\r\n                                        key={tl.id}\r\n                                        id={tl.id}\r\n                                        title={tl.title}\r\n                                        tasks={tasksForTodolist}\r\n                                        removeTask={removeTask}\r\n                                        changeFilter={changeFilter}\r\n                                        addTask={addTask}\r\n                                        changeTaskStatus={changeStatus}\r\n                                        filter={tl.filter}\r\n                                        removeTodolist={removeTodolist}\r\n                                        changeTaskTitle={changeTaskTitle}\r\n                                        changeTodolistTitle={changeTodolistTitle}\r\n                                    />\r\n                                </Paper>\r\n                            </Grid>\r\n                        })\r\n                    }\r\n                </Grid>\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default AppWithRedux;\r\n","\r\nimport {combineReducers, createStore} from 'redux';\r\nimport {tasksReducer} from \"./state/task-reducer\";\r\nimport {todolistsReducer} from \"./state/todolists-reducer\";\r\n\r\n// объединяя reducer-ы с помощью combineReducers,\r\n// мы задаём структуру нашего единственного объекта-состояния\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todolistsReducer\r\n})\r\n// непосредственно создаём store\r\nexport const store = createStore(rootReducer);\r\n// определить автоматически тип всего объекта состояния\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\r\n// @ts-ignore\r\nwindow.store = store;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport AppWithRedux from \"./AppWithRedux\";\r\nimport {store} from \"./store\";\r\nimport {Provider} from \"react-redux\";\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <AppWithRedux/>\r\n    </Provider>\r\n    , document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}